import java.io.*;
import java.net.Socket;
import java.util.ArrayList;

/**
 * Created by Melancias on 03/03/2017.
 */
class ServerThread extends Thread {

    private Socket socket = null;
    private AuthManager auth;
    private DataTransferUtils util;
    ServerThread(Socket inSoc,String password) throws IOException {
        socket = inSoc;
        util = new DataTransferUtils(socket);
        auth = AuthManager.getInstance(password);
        System.out.println("thread do server para cada cliente");

    }

    public void run(){
        try {
            //noinspection Since15

            if(!auth.userExists(util.getAccountCheck()))
                util.sendCloseHandshake();
            else
                util.sendHandshake();

            System.out.println("entrou no run");
            String[] crends=util.getCredentials();
            String user   = crends[0];
            String nonce  = crends[1];
            String hashedPasswd = crends[2];
            String action = crends[3];
            System.out.println("Connection established");
            if (auth.authenticate(user, nonce, hashedPasswd, action)){

                util.sendHandshake();
                if(!util.clientRepoAccessCheck()){
                    System.out.println("Access to repository denied");
                    interrupt();
                    this.stop();
                }
                System.out.println("Getting manifest...");

                Object request = util.getRequest();

                System.out.println("Received!");

                try {
                    DataManifest manifest = (DataManifest) request;

                    if (manifest.action.equals("push")) {
                        ArrayList<String> c = DataManifest.processManifest(manifest);
                        util.sendRequestList(c);
                        for (String s : c) {
                            System.out.println("Receiving files...");
                            if(manifest.autoGenerated){
                                if(manifest.repo.split("/").length==1) {
                                    String filepath=manifest.user + "/" + manifest.repo + "/" + s;
                                    storeFileArrangerPush(util,manifest,s,filepath);
//                                    util.pullFile(filepath+".sig", "servidor");
//                                    util.pullFile(filepath+".key", "servidor");
//                                    util.pullFile(filepath, "servidor");
                                }
                                else {
                                    String filepath=manifest.repo + "/" + s;
                                    storeFileArrangerPush(util,manifest,s,filepath);
//                                    util.pullFile(filepath+".sig", "servidor");
//                                    util.pullFile(filepath+".key", "servidor");
//                                    util.pullFile(filepath, "servidor");
                                }
                            }
                            else if (!manifest.autoGenerated & manifest.repo.split("/").length<3){
                                String filepath=manifest.user+"/"+manifest.repo;
                                storeFileArrangerPush(util,manifest,s,filepath);
//                                util.pullFile(filepath+".sig", "servidor");
//                                util.pullFile(filepath+".key", "servidor");
//                                util.pullFile(filepath,"servidor");
                            }
                            else if (!manifest.autoGenerated & manifest.repo.split("/").length<4){
                                String filepath=manifest.repo;
                                storeFileArrangerPush(util,manifest,s,filepath);
//                                util.pullFile(filepath+".sig", "servidor");
//                                util.pullFile(filepath+".key", "servidor");
//                                util.pullFile(filepath,"servidor");
                            }
                        }
                        util.sendRequest(0);
                    } else if (manifest.action.equals("pull")) {
                        if (RepoManager.checkRepo(manifest.repo,manifest.user) && RepoManager.isBeingShared(manifest)){
                            manifest=util.sendManifest(manifest.user,manifest.repo,"pull/server",manifest.whohasit);
                            ArrayList<String> c=util.getFileList();
                            for (String s : c) {
                                System.out.println("Sending files...");
                                if(manifest.autoGenerated){
                                    if(manifest.repo.split("/").length==1) {
                                        String filepath = manifest.user + "/" + manifest.repo + "/" + s;
                                        sendFileArrangerPull(util,manifest,filepath);
                                    }
                                    else {
                                        String filepath = manifest.repo + "/" + s;
                                        sendFileArrangerPull(util,manifest,filepath);

                                    }
                                }
                                else if (!manifest.autoGenerated & manifest.repo.split("/").length<3){
                                    String filepath=manifest.user+"/"+manifest.repo;
                                    sendFileArrangerPull(util,manifest,filepath);
                                }
                                else if (!manifest.autoGenerated & manifest.repo.split("/").length<4){
                                    String filepath=manifest.repo;
                                    sendFileArrangerPull(util,manifest,filepath);
                                }
                            }
                            util.sendRequest(0);

                        }
                        else{
                            System.out.println("Bad command; ingnoring");
                            System.out.println("Most likely repo doesn't exist");
                            util.sendRequest(1);
                        }
                    }


                } catch (ClassCastException e) {

                    String params = (String) request;

                    String[] paramsList = params.split(":");

                    String command = paramsList[0];

                    if (command.equals("share")) {
                        try {
                            if (RepoManager.shareWith(paramsList[2], paramsList[3], paramsList[1])) {
                                util.sendRequest(0);
                                System.out.println("Shared done.");
                            }else{
                                util.sendRequest(-1);
                            }
                        } catch (Exception o) {
                            o.printStackTrace();
                        }
                    }else if(command.equals("remove")){
                        try{
                            if(RepoManager.removeAccessToUser(paramsList[2], paramsList[3], paramsList[1])) {
                                util.sendRequest(0);
                                System.out.println("Remove done.");
                            }else
                                util.sendRequest(-1);

                        }catch (Exception o){
                            o.printStackTrace();
                        }

                    }



            //este codigo apenas exemplifica a comunicacao entre o cliente e o servidor
            //nao faz qualquer tipo de autenticacao


            System.out.println("thread acabou");
            socket.close();

        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }


            }
            //auth falhou
            else{util.sendCloseHandshake();}

            }
            catch(Exception e){
                Exception newasd=e;
                e.printStackTrace();
            }

        }

        public void storeFileArrangerPush(DataTransferUtils util,DataManifest manifest, String s,String filepath){
            try {
                util.pullFile(filepath+".sig", "servidor");
                util.pullFile(filepath+".key", "servidor");
                util.pullFile(filepath, "servidor");
                DataTransferUtils.CipherKey(filepath+".key");
            } catch (IOException e) {
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }

        }

        public void sendFileArrangerPull(DataTransferUtils util,DataManifest manifest,String filepath) throws IOException {
            util.pushFile(new File(filepath));
            util.sendHandshake();
            util.pushFile(new File(filepath+".sig"));
            File decipheredKey= DataTransferUtils.decipherKey(filepath);
            util.sendHandshake();
            util.pushFile(decipheredKey);
            decipheredKey.delete();
        }

}

