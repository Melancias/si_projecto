import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Scanner;

/**
 * Created by Melancias on 21/02/2017.
 */

public class myGit {
    public static void main (String[] args) throws Exception {
        String argumento =args[0];
        if(argumento.equals("-init")){
            try{
                Path currentRelativePath = Paths.get("");
                String s = currentRelativePath.toAbsolutePath().toString();
                System.out.println(s);
                File f = new File(s + "/"+ args[1]);
                    if (!f.exists()) {
                        f.mkdir();
                        System.out.println("O repositorio " + args[1] + "  foi criado localmente");
                    } else
                        System.out.println("O repositorio ja existe");


            }catch (Exception e){
                System.out.println("Nao foi possivel criar o repositorio");
            }

        }
        else{
            String[] address;
            String host = null;
            int port = 0;
            String localUser=null;
            try {
                address = args[1].split(":");
                host = address[0];
                port = Integer.parseInt(address[1]);
                localUser = args[0];
            }
            catch(Exception e){
                System.out.println("Endere√ßo ou porta incorrecto");
            }
            DataTransferUtils util = null;
            util = new DataTransferUtils(host, port, localUser);

            if(args.length < 5){
                System.out.println("O utilizador "+argumento+" autorizado");
                System.out.println("Confirmar password do utilizador " + args[0] + ": ");
                Scanner s = new Scanner(System.in);
                String pwd = s.nextLine();
                try{
                    if(pwd.equals(args[3])){
                        if(util.authClient(argumento, pwd))
                            System.out.println("O utilizador " + argumento + " foi criado");
                    }
                }catch(Exception e){
                    e.getStackTrace();
                }

            }else{
                String repo = args[5];
                if (!util.authClient(argumento, args[3])) {
                    // util.createUser(argumento, args[3]);
                    System.out.println("Authentication failed");
                    System.exit(-1);
                }
                if(!util.checkRepoAcess(repo,localUser,args[4])){
                    System.out.println("Utilizador sem acceso ao repositorio");
                    System.exit(-1);
                }
                if(args[4].equals("-push")){
                    util.sendManifest(localUser,repo,"push");
                    System.out.println("sending manifest");
                    ArrayList<String> fileList = util.getFileList();
                    try{
                        for (String file : fileList){
                            System.out.println("A enviar " + file);
                            if(new File(repo).isFile()){util.pushFile(new File(repo));}
                            else{util.pushFile(new File(repo+"/"+file));}

                        }
                        int r = util.receiveAnswer();
                        if(r == 0){
                            System.out.println(args[5] + " foi enviado para o servidor");
                        }else{
                            System.out.println("Ocorreu um erro a fazer push");
                        }
                    }catch (Exception e){
                        System.out.println("Nao foi possivel enviar " + args[5]);
                    }


                }else if(args[4].equals("-pull")){
                    //enviar manifesto vazio
                    util.sendManifest(localUser,repo,"pull");
                    Object request = util.getRequest();
                    DataManifest manifest=null;
                    try{
                    manifest = (DataManifest) request;}

                    catch(Exception e){
                        if (0 == (Integer) request){
                            System.out.println("Repo nao existe");
                            System.exit(0);
                        }
                    }
                    System.out.println("manifest received");
                    ArrayList<String> fileList= DataManifest.processManifest(manifest);

                    try {
                        util.sendRequestList(fileList);
                        for (String file : fileList) {
                            System.out.println("A receber ficheiro: " + file);
                            if(manifest.autoGenerated)
                                util.pullFile(manifest.repo + "/" + file,"cliente");
                            else
                                util.pullFile(manifest.repo,"cliente");
                        }

                        int r = util.receiveAnswer();
                        if(r == 0){
                            System.out.println(args[5] + " foi recebido ");
                        }else{
                            System.out.println("Ocorreu um erro a fazer pull");
                        }
                    }catch (Exception e){
                        e.printStackTrace();
                        System.out.println("Nao foi posssivel copiar " + args[5] + "do servidor");
                    }

                }else if(args[4].equals("-share")){
                    try{
                        util.share("share", argumento, args[5], args[6]);
                        int r = util.receiveAnswer();
                        if(r == 0)
                            System.out.println(args[5] + "foi partilhado com utilizador" + args[6]);
                        else
                            System.out.println("Ocorreu um erro a fazer share");
                    }catch (Exception e){
                        System.out.println("Ocorreu um erro");
                    }

                }else if(args[4].equals("-remove"))
                    try{
                        util.remove("remove", argumento, args[5], args[6]);
                        int r = util.receiveAnswer();
                        if(r == 0){
                            System.out.println("Removed");
                        }else
                            System.out.println("Ocorreu um erro a fazer remove");
                    }catch (Exception e){
                        System.out.println("Ocorreu um erro");
                        e.printStackTrace();
                    }

            }
        }
    }

}

