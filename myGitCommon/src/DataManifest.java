import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * Created by Melancias on 03/03/2017.
 */

public class DataManifest implements Serializable{

    private HashMap<String,Long> dataManifest = new HashMap<String,Long>();
    public String user;
    public String repo;
    public String action;
    private boolean autoGenerated=false;

    public DataManifest(String user,String repo,String action){
        this.user=user;
        this.repo=repo;
        this.action=action;
    }


    public void addFileManifestManual(String file){
        dataManifest.put(file,new File("./"+file).lastModified());
    }

    public void autoGenerateManifest(String path) throws Exception {

        File[] files = new File("./"+path).listFiles();

        for (File file : files) {
            if (file.isFile()) {
                dataManifest.put(file.getName(),file.lastModified());
            }
            else{
                System.out.println("Encontrei uma pasta, ignorando");
            }
        }
        autoGenerated=true;
    }

    public Long getModifiedData(String file){return dataManifest.get(file);}

    public static ArrayList<String> processManifest(DataManifest data) throws IOException {
        if(data.action.equals("pull") || data.action.equals("push")){


            ArrayList<String> requestedFiles = new ArrayList<String>();
            String repo = null;
            //pegamos no path mandado pelo manifesto e adaptamos para o servidor(caso user+repo)
            if(new File("./"+data.repo.split("/")[0]).isDirectory()){repo=data.repo;}
            else if(data.repo.split("/").length<2){repo=data.user + "/" +data.repo;}
            else{repo=data.user+ "/"+data.repo;}
            data.repo=repo;
            File dirTest= new File(repo);
            if(!dirTest.exists()){
                System.out.println("Primeiro push, a criar repositorio");
                RepoManager.createRepo(repo,data.user);
            }
            //Adaptação do codigo para apenas um ficheiro
            File[] files = filterHistory("./" + repo);
            if(files==null){
                files = new File[]{new File("./" + repo)};
                if(files[0]==null){
                    requestedFiles.add(repo);
                    return requestedFiles;
                }
            }

            if(data.action.equals("push")) {
                for(String s:data.dataManifest.keySet()){
                    if(!new File("./"+repo+"/"+s).exists()){
                        requestedFiles.add(s);
                    }
                }

                for (File file : files) {
                    if (file.exists() & !data.dataManifest.containsKey(file.getName())){
                        try {
                            RepoManager.manageVersions(file);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                    else if (file.isFile() & file.lastModified() < data.getModifiedData(file.getName())) {
                        requestedFiles.add(file.getName());
                        RepoManager.manageVersions(file);
                        System.out.println("Ficheiro " + file.getName() + " modificado");
                    } else if (file.isFile() & file.lastModified() > data.getModifiedData(file.getName())){
                        System.out.println("Repo do cliente não actualizado, fazer pull primeiro");
                        break;
                    }
                    else{ System.out.println("Ficheiro nao modificado"); }
                }
                return requestedFiles;

            }

            else if(data.action.equals("pull")){

                for (File file : files) {
                    if (file.isFile() & file.lastModified() > data.getModifiedData(file.getName())) {
                        requestedFiles.add(file.getName());
                        System.out.println("Ficheiro " + file.getName() + " existe nova versao");
                    }
                    else if (file.isFile() & file.lastModified() < data.getModifiedData(file.getName())){
                        System.out.println("Repo do servidor não actualizado, fazer push primeiro");
                        break;
                    }
                    else {
                        System.out.println("Versao do cliente actualizada");
                    }
                }
                System.out.println(requestedFiles);
                return requestedFiles;
            }
        }
        else if (data.action.equals("share")){

        }
        else if (data.action.equals("remove")){

        }
        return null;
    }



    public static File[] filterHistory(String pathname){

        File[] files = new File(pathname).listFiles(new FileFilter() {
            @Override
            public boolean accept(File pathname) {
                String tempName= pathname.getName();
                try{
                    if(tempName.matches(".*\\.[1-2]$") || tempName.matches("^\\..*")){
                        return false;}
                    else
                    {
                        return true;
                    }
                }
                catch(Exception e) {
                    return true;
                }
            }});

        return files;
    }

}