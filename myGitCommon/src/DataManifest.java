import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.io.Serializable;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * Created by Melancias on 03/03/2017.
 */

public class DataManifest implements Serializable{

    private HashMap<String,Long> dataManifest = new HashMap<String,Long>();
    public String user;
    public String repo;
    public String action;
    public boolean autoGenerated=false;

    public DataManifest(String user,String repo,String action){
        this.user=user;
        this.repo=repo;
        this.action=action;
    }


    public void addFileManifestManual(String file){
        File temp =new File(file);
        dataManifest.put(temp.getName(),temp.lastModified());
    }

    public void autoGenerateManifest(String path) throws Exception {

        File[] files = new File("./"+path).listFiles();

        for (File file : files) {
            if (file.isFile()) {
                dataManifest.put(file.getName(),file.lastModified());
            }
            else{
                System.out.println("Encontrei uma pasta, ignorando");
            }
        }
        autoGenerated=true;
    }

    public Long getModifiedData(String file){return dataManifest.get(file);}

//    public static ArrayList<String> processManifest(DataManifest data) throws IOException {
//        ArrayList<String> requestedFiles = new ArrayList<String>();
//        String repo = null;
//        //pegamos no path mandado pelo manifesto e adaptamos para o servidor(caso user+repo)
//        if(new File("./"+data.repo.split("/")[0]).isDirectory()){repo=data.repo;}
//        else if(data.repo.split("/").length<2){repo=data.user + "/" +data.repo;}
//        else{repo=data.user+ "/"+data.repo;}
//        data.repo=repo;
//        repo="./"+repo;
//        File dirTest= new File(repo);
//        if(!dirTest.exists() & data.autoGenerated==true){
//            System.out.println("Primeiro push, a criar repositorio");
//            RepoManager.createRepo(repo,data.user);
//        }
//        //Adaptação do codigo para apenas um ficheiro
//        File[] files = filterHistory( repo);
//        if(files==null || files.length==0){
//            files = new File[]{new File(repo)};
//            if(!files[0].exists()){
//                requestedFiles.add(new File(repo).getName());
//                return requestedFiles;
//            }
//        }
//
//        if(data.action.equals("push")) {
//            if(data.autoGenerated){
//            for(String s:data.dataManifest.keySet()){
//                if(!new File("./"+repo+"/"+s).exists()){
//                    requestedFiles.add(s);
//                }
//            }
//
//            }
//
//            for (File file : files) {
//                if (file.exists() & !data.dataManifest.containsKey(file.getName()) & data.autoGenerated==true){
//                    try {
//                        RepoManager.manageVersions(file);
//                    } catch (IOException e) {
//                        e.printStackTrace();
//                    }
//                }
//                else if (file.isFile() & file.lastModified() < data.getModifiedData(file.getName())) {
//                    requestedFiles.add(file.getName());
//                    RepoManager.manageVersions(file);
//                    System.out.println("Ficheiro " + file.getName() + " modificado");
//                } else if (file.isFile() & file.lastModified() > data.getModifiedData(file.getName())){
//                    System.out.println("Repo do cliente não actualizado, fazer pull primeiro");
//                    break;
//                }
//                else{ System.out.println("Ficheiro nao modificado"); }
//            }
//            return requestedFiles;
//
//        }
//
//        else if(data.action.equals("pull")){
//
//            for (File file : files) {
//                if (file.isFile() & file.lastModified() > data.getModifiedData(file.getName())) {
//                    requestedFiles.add(file.getName());
//                    System.out.println("Ficheiro " + file.getName() + " existe nova versao");
//                }
//                else if (file.isFile() & file.lastModified() < data.getModifiedData(file.getName())){
//                System.out.println("Repo do servidor não actualizado, fazer push primeiro");
//                break;
//                }
//                else {
//                    System.out.println("Versao do cliente actualizada");
//                }
//            }
//            System.out.println(requestedFiles);
//            return requestedFiles;
//        }
//        return null;
//    }

    public static ArrayList<String> processManifest(DataManifest data) throws IOException {
        String[] structure=data.repo.split("/");
        ArrayList<String> files=new ArrayList<String>();;
        File dirTest= new File(data.repo);
        if(!dirTest.exists() & data.autoGenerated==true & structure.length==3){
            System.out.println("Primeiro push, a criar repositorio");
            RepoManager.createRepo(data.repo,data.user);
        }
        else if(!new File(data.user+"/"+data.repo).exists() & data.autoGenerated==true & structure.length==1){
            System.out.println("Primeiro push, a criar repositorio");
            RepoManager.createRepo(data.user+"/"+data.repo,data.user);
        }
        else if (!new File(data.user+"/"+structure[0]).exists() & data.autoGenerated==false & structure.length==2 ){
            System.out.println("Primeiro push, a criar repositorio");
            RepoManager.createRepo(data.user+"/"+structure[0],data.user);
        }

        if(data.autoGenerated==false){
            if(structure.length<3){files=processFile(true,data,data.action);}
            else{files=processFile(false,data,data.action);}
        }
        else {
            if(structure.length==1)
                files = processFolder(true,data, data.action);

            else
                files = processFolder(false,data, data.action);

        }

        return files;
    }

    private static ArrayList<String> processFolder(boolean userappend,DataManifest dataManifest, String action) throws IOException {
        ArrayList<String> files=new ArrayList<String>();;
        String repo=dataManifest.repo;
        if (userappend){
            repo=dataManifest.user+"/"+repo;
        }
        if(action.equals("push")){
        for(String s:dataManifest.dataManifest.keySet()) {
            if (!new File("./" + repo + "/" + s).exists()) {
                files.add(s);
            }
        }

        File[] localFiles = filterHistory(repo);
            for (File file : localFiles) {
                if (file.exists() & !dataManifest.dataManifest.containsKey(file.getName()) & dataManifest.autoGenerated==true){
                    try {
                        RepoManager.manageVersions(file);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                else if (file.isFile() & file.lastModified() < dataManifest.getModifiedData(file.getName())) {
                    files.add(file.getName());
                    RepoManager.manageVersions(file);
                    System.out.println("Ficheiro " + file.getName() + " modificado");
                } else if (file.isFile() & file.lastModified() > dataManifest.getModifiedData(file.getName())){
                    System.out.println("Repo do cliente não actualizado, fazer pull primeiro");
                    break;
                }
                else{ System.out.println("Ficheiro nao modificado"); }
            }
        }









        return files;
    }

    private static ArrayList<String> processFile(boolean b, DataManifest dataManifest, String action) throws IOException {

        String repo="";
        if(b){
            repo= dataManifest.user+"/"+dataManifest.repo;
        }
        else{
            repo=dataManifest.repo;
        }
        ArrayList<String> files=new ArrayList<String>();
        String filename=repo.split("/")[repo.split("/").length-1];
        if (action.equals("push")){
            File testCase=new File("./"+repo);
            if(!testCase.exists()){files.add(filename);}
            else if (pushChecker(testCase,dataManifest)){
                files.add(filename);
            }
        }
        return files;
    }


    public static File[] filterHistory(String pathname){

        File[] files = new File(pathname).listFiles(new FileFilter() {
            @Override
            public boolean accept(File pathname) {
                String tempName= pathname.getName();
                try{
                    if(tempName.matches(".*\\.[1-2]$") || tempName.matches("^\\..*")){
                        return false;}
                    else
                    {
                        return true;
                    }
                }
                catch(Exception e) {
                    return true;
                }
            }});

        return files;
    }

    public static boolean pushChecker(File file, DataManifest data) throws IOException {
        if (file.exists() & !data.dataManifest.containsKey(file.getName())){
                    try {
                        RepoManager.manageVersions(file);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                else if (file.isFile() & file.lastModified() < data.getModifiedData(file.getName())) {
                    RepoManager.manageVersions(file);
                    System.out.println("Ficheiro " + file.getName() + " modificado");
                    return true;

                } else if (file.isFile() & file.lastModified() > data.getModifiedData(file.getName())){
                    System.out.println("Repo do cliente não actualizado, fazer pull primeiro");
                    return false;
                }
                else{ System.out.println("Ficheiro nao modificado"); return false;}
                return false;
    }

}